// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: booking.sql

package db

import (
	"context"
	"time"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (account_id, room_id, start, "end", phone_booking)
VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, account_id, room_id, start, "end", status, phone_booking
`

type CreateBookingParams struct {
	AccountID    int64     `json:"account_id"`
	RoomID       int64     `json:"room_id"`
	Start        time.Time `json:"start"`
	End          time.Time `json:"end"`
	PhoneBooking string    `json:"phone_booking"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, createBooking,
		arg.AccountID,
		arg.RoomID,
		arg.Start,
		arg.End,
		arg.PhoneBooking,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.RoomID,
		&i.Start,
		&i.End,
		&i.Status,
		&i.PhoneBooking,
	)
	return i, err
}

const getBookingOfAccount = `-- name: GetBookingOfAccount :many
SELECT id, account_id, room_id, start, "end", status, phone_booking FROM bookings WHERE account_id = $1
`

func (q *Queries) GetBookingOfAccount(ctx context.Context, accountID int64) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getBookingOfAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Booking{}
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.RoomID,
			&i.Start,
			&i.End,
			&i.Status,
			&i.PhoneBooking,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBookings = `-- name: ListBookings :many
SELECT id, account_id, room_id, start, "end", status, phone_booking FROM bookings LIMIT $1 OFFSET $2
`

type ListBookingsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBookings(ctx context.Context, arg ListBookingsParams) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, listBookings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Booking{}
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.RoomID,
			&i.Start,
			&i.End,
			&i.Status,
			&i.PhoneBooking,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBooking = `-- name: UpdateBooking :one
UPDATE bookings
SET status = $2
WHERE id = $1
RETURNING id, account_id, room_id, start, "end", status, phone_booking
`

type UpdateBookingParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateBooking(ctx context.Context, arg UpdateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, updateBooking, arg.ID, arg.Status)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.RoomID,
		&i.Start,
		&i.End,
		&i.Status,
		&i.PhoneBooking,
	)
	return i, err
}
