// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: account.sql

package db

import (
	"context"
)

const create_account = `-- name: create_account :one
INSERT INTO accounts (name, role, email, password, phone, student_id)
VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, name, role, email, password, phone, student_id, is_delete
`

type create_accountParams struct {
	Name      string `json:"name"`
	Role      string `json:"role"`
	Email     string `json:"email"`
	Password  string `json:"password"`
	Phone     string `json:"phone"`
	StudentID string `json:"student_id"`
}

func (q *Queries) create_account(ctx context.Context, arg create_accountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, create_account,
		arg.Name,
		arg.Role,
		arg.Email,
		arg.Password,
		arg.Phone,
		arg.StudentID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.StudentID,
		&i.IsDelete,
	)
	return i, err
}

const delete_account = `-- name: delete_account :one
UPDATE accounts
SET is_delete = true
WHERE id = $1
AND is_delete = false
RETURNING id, name, role, email, password, phone, student_id, is_delete
`

func (q *Queries) delete_account(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, delete_account, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.StudentID,
		&i.IsDelete,
	)
	return i, err
}

const get_account = `-- name: get_account :one
SELECT id, name, role, email, password, phone, student_id, is_delete FROM accounts WHERE id = $1 AND is_delete = false
`

func (q *Queries) get_account(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, get_account, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.StudentID,
		&i.IsDelete,
	)
	return i, err
}

const list_accounts = `-- name: list_accounts :many
SELECT id, name, role, email, password, phone, student_id, is_delete FROM accounts WHERE is_delete = false LIMIT $1 OFFSET $2
`

type list_accountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) list_accounts(ctx context.Context, arg list_accountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, list_accounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Role,
			&i.Email,
			&i.Password,
			&i.Phone,
			&i.StudentID,
			&i.IsDelete,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update_account = `-- name: update_account :one
UPDATE accounts
SET name = $2, role = $3, email = $4, password = $5, phone = $6
WHERE id = $1
AND is_delete = false
RETURNING id, name, role, email, password, phone, student_id, is_delete
`

type update_accountParams struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	Role     string `json:"role"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Phone    string `json:"phone"`
}

func (q *Queries) update_account(ctx context.Context, arg update_accountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, update_account,
		arg.ID,
		arg.Name,
		arg.Role,
		arg.Email,
		arg.Password,
		arg.Phone,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.StudentID,
		&i.IsDelete,
	)
	return i, err
}
